{
    /*
        // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
        // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
        // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
        // same ids are connected.
        // Example:
        "Print to console": {
            "prefix": "log",
            "body": [
                "console.log('$1');",
                "$2"
            ],
            "description": "Log output to console"
        }
    */
    
        "Log": {
        "prefix": "logSnippet",
        "body": "console.log($1);"
        },
    
        "Express": {
        "prefix": "expressSnippet",
        "body": [
        "//Server Express",
        "const express = require('express');",
        "const app = express();",
        "app.set('view engine', 'ejs');",
        "app.set('views','./views');",
        "app.use(express.static('public'));"
        ]
        },
    
        "MongoConnect": {
            "prefix": "mongoConnectSnippet",
            "body": [
            "//Mongo Connection",
            "const {MongoClient, ObjectId} = require ('mongodb');",
            "const url = 'mongodb://localhost:27017/shop';",
            " ",
            "MongoClient.connect(url)",
            ".then(db => {",
                "app.listen(3000, ()=> console.log('server started'));",	
                "",
            "})",
            " ",
            ".catch(err=> console.log(err.message));"
            ]
        },
    
        "MongooseConnect": {
            "prefix": "MongooseConnectSnippet",
            "body": [
                "//Mongoose Connection",
                "const mongoose = require('mongoose');",
                "mongoose.Promise = global.Promise;",
                "const uri = 'mongodb://localhost/shopMongoose';",
                "mongoose.connect(uri,{useMongoClient:true});",
                "mongoose.connection",
                ".once('open', ()=> {app.listen(3000,()=>console.log('Server started'))})",
                ".on('error', console.error.bind(console, 'Warning Error:'));"
            ]
        },
    
        "MongooseSchema": {
            "prefix": "MongooseSchmaSnippet",
            "body": [
                "const mongoose = require('mongoose');",
                "",
                "const nameSchema = new mongoose.Schema({",
                    "name: String,",
                    "desc: String,",
                    "image: String,",
                    "video: String,",
                "});",
                
                "const name = mongoose.model('name',nameSchema);",
                "module.exports = name;"
            ]
        },
    
        "MulterUploadFileConfig": {
            "prefix": "multerUploadFileConfigSnippet",
            "body": [
                "const multer = require('multer');",
                "",
                "//setup noi chua file",
                "const storage = multer.diskStorage({",
                    "destination: (req, file, cb) => cb(null, './public/images'),",
                    "filename: (req, file, cb) => cb(null, file.originalname)",
                "});",
                "",
                "//setup loc loai file",
                "function fileFilter(req, file, cb){",
                    "const {mimetype} = file;",
                    "//xac dinh kieu file",
                    "if (mimetype === 'image/png'|| mimetype === 'image/jpeg'|| mimetype === 'image/jpg'){",
                        "return cb(null, true);",
                    "}",
                    "cb(new Error('Yeu cau file co duoi .png, .jpeg, .jpg'));",
                "}",
                "",
                "//setup dung luong file tai len",
                "const limits = {fileSize: 1024000};",
                "",
                "//ket hop lai cac thanh phan tren",
                "const upload = multer({storage,limits,fileFilter});",
                "",
                "//export ra de su dung trong file .js khac",
                "modul.exports = upload"
                ]
        },
    
            "body-parser": {
                "prefix": "bodyparserSnippet",
                "body": "const parser = require('body-parser').urlencoded({extended:false});",
                "description": "body-parser"
            },
        
            "route GET": {
                "prefix": "getSnippet",
                "body": [
                    "app.get('/$1',(req,res)=> {",
                        " ",
                    "});"],
                "description": "GET route"
            },
        
            "route POST": {
                "prefix": "postSnippet",
                "body": [
                    "app.post('/$1', parser, (req,res)=> {",
                    "const { } = req.body;",
                    "});"
                    ],
                "description": "POST route"
            }
    
            
            
    }